{"ast":null,"code":"import \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport JsonP from 'jsonp';\nimport axios from 'axios';\n\nclass Axios {\n  static jsonp(options) {\n    return new Promise((resolve, reject) => {\n      JsonP(options.url, {\n        param: 'callback'\n      }, function (err, response) {\n        if (response.status === 'success') {\n          resolve(response);\n        } else {\n          reject(response.message);\n        }\n      });\n    });\n  }\n\n  static ajax(options) {\n    let loading;\n\n    if (options.data && options.data.isShowLoading !== false) {\n      loading = document.getElementById('ajaxLoading');\n      loading.style.display = 'block';\n    } // let baseApi = 'https://www.easy-mock.com/mock/5b012c1fe6e1035843cd3aff/mockapi'\n\n\n    let baseApi = 'https://www.easy-mock.com/mock/5a7278e28d0c633b9c4adbd7/api';\n    return new Promise((resolve, reject) => {\n      axios({\n        url: options.url,\n        method: 'get',\n        baseURL: baseApi,\n        timeout: 5000,\n        params: options.data && options.data.params || ''\n      }).then(response => {\n        if (options.data && options.data.isShowLoading !== false) {\n          loading = document.getElementById('ajaxLoading');\n          loading.style.display = 'none';\n        }\n\n        if (response.status == '200') {\n          let res = response.data;\n\n          if (res.code == '0') {\n            resolve(res);\n          } else {\n            _Modal.info({\n              title: \"提示\",\n              content: res.msg\n            });\n          }\n        } else {\n          reject(response.data);\n        }\n      });\n    });\n  }\n\n}\n\nexport default Axios;","map":{"version":3,"sources":["E:\\Concordia course\\laoma前端\\#9 react慕课2\\project\\BikeSharingMS-master\\src\\axios\\index.js"],"names":["JsonP","axios","Axios","jsonp","options","Promise","resolve","reject","url","param","err","response","status","message","ajax","loading","data","isShowLoading","document","getElementById","style","display","baseApi","method","baseURL","timeout","params","then","res","code","info","title","content","msg"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,MAAMC,KAAN,CAAY;AACV,SAAOC,KAAP,CAAaC,OAAb,EAAsB;AACpB,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;AACrCP,MAAAA,KAAK,CAACI,OAAO,CAACI,GAAT,EAAa;AAChBC,QAAAA,KAAK,EAAE;AADS,OAAb,EAEH,UAASC,GAAT,EAAcC,QAAd,EAAwB;AACxB,YAAGA,QAAQ,CAACC,MAAT,KAAoB,SAAvB,EAAkC;AAChCN,UAAAA,OAAO,CAACK,QAAD,CAAP;AACD,SAFD,MAEM;AACJJ,UAAAA,MAAM,CAACI,QAAQ,CAACE,OAAV,CAAN;AACD;AAEF,OATI,CAAL;AAUD,KAXM,CAAP;AAYD;;AAED,SAAOC,IAAP,CAAYV,OAAZ,EAAqB;AACnB,QAAIW,OAAJ;;AACA,QAAGX,OAAO,CAACY,IAAR,IAAgBZ,OAAO,CAACY,IAAR,CAAaC,aAAb,KAA+B,KAAlD,EAAyD;AACvDF,MAAAA,OAAO,GAAGG,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAV;AACAJ,MAAAA,OAAO,CAACK,KAAR,CAAcC,OAAd,GAAwB,OAAxB;AACD,KALkB,CAMnB;;;AACA,QAAIC,OAAO,GAAG,6DAAd;AACA,WAAO,IAAIjB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAmB;AACpCN,MAAAA,KAAK,CAAC;AACJO,QAAAA,GAAG,EAAEJ,OAAO,CAACI,GADT;AAEJe,QAAAA,MAAM,EAAE,KAFJ;AAGJC,QAAAA,OAAO,EAAEF,OAHL;AAIJG,QAAAA,OAAO,EAAE,IAJL;AAKJC,QAAAA,MAAM,EAAGtB,OAAO,CAACY,IAAR,IAAgBZ,OAAO,CAACY,IAAR,CAAaU,MAA9B,IAAyC;AAL7C,OAAD,CAAL,CAMGC,IANH,CAMShB,QAAD,IAAY;AAClB,YAAGP,OAAO,CAACY,IAAR,IAAgBZ,OAAO,CAACY,IAAR,CAAaC,aAAb,KAA+B,KAAlD,EAAyD;AACvDF,UAAAA,OAAO,GAAGG,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAV;AACAJ,UAAAA,OAAO,CAACK,KAAR,CAAcC,OAAd,GAAwB,MAAxB;AACD;;AACD,YAAGV,QAAQ,CAACC,MAAT,IAAkB,KAArB,EAA4B;AAC1B,cAAIgB,GAAG,GAAGjB,QAAQ,CAACK,IAAnB;;AACA,cAAGY,GAAG,CAACC,IAAJ,IAAW,GAAd,EAAmB;AACjBvB,YAAAA,OAAO,CAACsB,GAAD,CAAP;AACD,WAFD,MAEK;AACH,mBAAME,IAAN,CAAW;AACTC,cAAAA,KAAK,EAAE,IADE;AAETC,cAAAA,OAAO,EAAEJ,GAAG,CAACK;AAFJ,aAAX;AAID;AACF,SAVD,MAUK;AACH1B,UAAAA,MAAM,CAACI,QAAQ,CAACK,IAAV,CAAN;AACD;AACF,OAxBD;AAyBD,KA1BM,CAAP;AA2BD;;AAnDS;;AAsDZ,eAAed,KAAf","sourcesContent":["import JsonP from 'jsonp';\nimport axios from 'axios';\nimport { Modal } from 'antd';\n\nclass Axios {\n  static jsonp(options) {\n    return new Promise((resolve, reject)=> {\n      JsonP(options.url,{\n        param: 'callback'\n      },function(err, response) {\n        if(response.status === 'success') {\n          resolve(response);\n        }else {\n          reject(response.message)\n        }\n      \n      })\n    })\n  }\n\n  static ajax(options) {\n    let loading;\n    if(options.data && options.data.isShowLoading !== false) {\n      loading = document.getElementById('ajaxLoading');\n      loading.style.display = 'block'\n    }\n    // let baseApi = 'https://www.easy-mock.com/mock/5b012c1fe6e1035843cd3aff/mockapi'\n    let baseApi = 'https://www.easy-mock.com/mock/5a7278e28d0c633b9c4adbd7/api'\n    return new Promise((resolve, reject)=>{\n      axios({\n        url: options.url,\n        method: 'get',\n        baseURL: baseApi,\n        timeout: 5000,\n        params: (options.data && options.data.params) || ''\n      }).then((response)=>{\n        if(options.data && options.data.isShowLoading !== false) {\n          loading = document.getElementById('ajaxLoading');\n          loading.style.display = 'none'\n        }\n        if(response.status =='200') {\n          let res = response.data;\n          if(res.code =='0') {\n            resolve(res)\n          }else{\n            Modal.info({\n              title: \"提示\",\n              content: res.msg\n            })\n          }\n        }else{\n          reject(response.data)\n        }\n      })\n    })\n  }\n}\n\nexport default Axios;"]},"metadata":{},"sourceType":"module"}