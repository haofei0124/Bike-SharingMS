{"ast":null,"code":"import \"antd/lib/checkbox/style\";\nimport _Checkbox from \"antd/lib/checkbox\";\nimport \"antd/lib/icon/style\";\nimport _Icon from \"antd/lib/icon\";\nimport \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nvar _jsxFileName = \"E:\\\\Concordia course\\\\laoma\\u524D\\u7AEF\\\\#9 react\\u6155\\u8BFE2\\\\project\\\\BikeSharingMS-master\\\\src\\\\pages\\\\form\\\\login.js\";\nimport React from 'react';\nconst FormItem = _Form.Item;\n\nclass FormLogin extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = () => {\n      let userInfo = this.props.form.getFieldsValue();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          _message.success(\"\".concat(userInfo.userName, \" Congratulations, your login is successful, the current password is \").concat(userInfo.userPwd));\n        }\n      });\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(_Card, {\n      title: \"Inline Form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(_Form, {\n      layout: \"inline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, React.createElement(_Input, {\n      placeholder: \"username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    })), React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, React.createElement(_Input, {\n      placeholder: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    })), React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(_Button, {\n      type: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"login\")))), React.createElement(_Card, {\n      title: \"Horizontal form\",\n      style: {\n        marginTop: 10\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(_Form, {\n      style: {\n        width: 300\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, getFieldDecorator('userName', {\n      // initialValue: 'Jack',\n      rules: [{\n        required: true,\n        message: 'Username can not be empty'\n      }, {\n        min: 5,\n        max: 10,\n        message: 'Length is out of range'\n      }, {\n        pattern: new RegExp('^\\\\w+$', 'g'),\n        message: 'Username must be a letter or number'\n      }]\n    })(React.createElement(_Input, {\n      prefix: React.createElement(_Icon, {\n        type: \"user\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }),\n      placeholder: \"username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }))), React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, getFieldDecorator('userPwd', {\n      // initialValue: '123456',\n      rules: [{\n        required: true,\n        message: 'password can not be empty'\n      }]\n    })(React.createElement(_Input, {\n      prefix: React.createElement(_Icon, {\n        type: \"lock\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }),\n      placeholder: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }))), React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, getFieldDecorator('remember', {\n      valuePropName: 'checked',\n      initialValue: true\n    })(React.createElement(_Checkbox, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Remember password\")), React.createElement(\"a\", {\n      href: \"#\",\n      style: {\n        float: 'right'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Forget password\")), React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(_Button, {\n      type: \"primary\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Login\")))));\n  }\n\n}\n\nexport default _Form.create()(FormLogin);","map":{"version":3,"sources":["E:\\Concordia course\\laoma前端\\#9 react慕课2\\project\\BikeSharingMS-master\\src\\pages\\form\\login.js"],"names":["React","FormItem","Item","FormLogin","Component","handleSubmit","userInfo","props","form","getFieldsValue","validateFields","err","values","success","userName","userPwd","render","getFieldDecorator","marginTop","width","rules","required","message","min","max","pattern","RegExp","valuePropName","initialValue","float","create"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Card, Form, Input, Button, message, Icon, Checkbox } from 'antd';\nconst FormItem = Form.Item\n \nclass FormLogin extends React.Component {\n  handleSubmit=()=> {\n    let userInfo = this.props.form.getFieldsValue();\n    this.props.form.validateFields((err, values)=>{\n      if(!err) {\n        message.success(`${userInfo.userName} Congratulations, your login is successful, the current password is ${userInfo.userPwd}`)\n      }\n    });\n  }\n  \n  render() {\n    const { getFieldDecorator } = this.props.form;  \n    return(\n      <div>\n        <Card title=\"Inline Form\">\n          <Form layout=\"inline\">\n            <FormItem>\n              <Input placeholder=\"username\"/>\n            </FormItem>\n            <FormItem>\n              <Input placeholder=\"password\"/>\n            </FormItem>\n            <FormItem>\n              <Button type=\"primary\">login</Button>\n            </FormItem>\n          </Form>\n        </Card>\n        <Card title=\"Horizontal form\" style={{marginTop: 10}}>\n          <Form style={{width:300}}>\n          <FormItem>\n            {\n              getFieldDecorator('userName', {\n                // initialValue: 'Jack',\n                rules: [\n                  {\n                    required: true,\n                    message:'Username can not be empty'\n                  },\n                  {\n                    min:5,\n                    max:10,\n                    message:'Length is out of range'\n                  },\n                  {\n                    pattern: new RegExp('^\\\\w+$', 'g'),\n                    message:'Username must be a letter or number'\n                  },\n                ]\n              })(\n                <Input prefix={<Icon type=\"user\"/>} placeholder=\"username\" />\n              )\n            }\n             \n            </FormItem>\n            <FormItem>\n            {\n              getFieldDecorator('userPwd', {\n                // initialValue: '123456',\n                rules: [\n                  {\n                    required: true,\n                    message:'password can not be empty'\n                  }\n                ]\n              })(\n                <Input prefix={<Icon type=\"lock\"/>}placeholder=\"password\" />\n              )\n            }\n            </FormItem>\n            <FormItem >\n            {\n              getFieldDecorator('remember', {\n                valuePropName: 'checked',\n                initialValue: true\n              })(\n                <Checkbox>Remember password</Checkbox>\n              )\n            }\n            <a href=\"#\" style={{float:'right'}}>Forget password</a>\n            </FormItem>\n            <FormItem >\n              <Button type=\"primary\" onClick={this.handleSubmit}>Login</Button>\n            </FormItem>\n          </Form>\n        </Card>\n      </div>\n    );\n  }\n}\nexport default Form.create()(FormLogin);\n"]},"metadata":{},"sourceType":"module"}